{"ast":null,"code":"const API_ROOT = `http://localhost:3000/api/v1`;\nconst token = localStorage.getItem('token');\nconst URL = \"http://localhost:3000\";\nlet User_type = \"\";\nconst PostsURL = \"http://localhost:3000/posts\";\nconst User_Posts = \"http://localhost:3000/user_posts\";\nconst ListContractorsURL = \"http://localhost:3000/list_contractors\";\nconst UserUrl = \"http://localhost:3000/users\"; // const headers = {\n//     'Content-Type': 'application/json',\n//     Accepts: 'application/json',\n//     Authorization: localStorage.getItem('token')\n// };\n\nconst setCurrentUserType = type => {\n  User_type = type;\n};\n\nconst login = data => {\n  return fetch(`${API_ROOT}/auth`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json',\n      Authorization: localStorage.getItem('token')\n    },\n    body: JSON.stringify(data)\n  }).then(resp => resp.json());\n};\n\nconst getCurrentUser = () => {\n  return fetch(`${API_ROOT}/current_user`, {\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json',\n      Authorization: localStorage.getItem('token')\n    }\n  }).then(handleErrors).then(res => {\n    console.log(res);\n    return res.json();\n  });\n};\n\nconst getUserDetails = userId => {\n  return fetch(UserUrl + \"/\" + userId, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json',\n      Authorization: localStorage.getItem('token')\n    }\n  }).then(handleErrors).then(resp => resp.json());\n};\n\nconst getcurrentUserType = () => {\n  return User_type;\n};\n\nfunction handleErrors(response) {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  return response;\n}\n\nconst createUser = data => {\n  return fetch(URL + \"/users\", {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json',\n      Authorization: localStorage.getItem('token')\n    },\n    body: JSON.stringify({\n      user: {\n        username: data.username,\n        email: data.email,\n        city: data.city,\n        country: data.country,\n        phone: data.phone,\n        contractee: data.contractee,\n        contractor: data.contractor,\n        password: data.password\n      }\n    })\n  }).then(response => response.json()).then(user => {\n    console.log(user);\n\n    if (user.contractor) {\n      User_type = \"contractor\";\n      return createContractor(user, data);\n    } else {\n      User_type = \"contractee\";\n      return createContractee(user, data);\n    }\n  });\n};\n\nconst createContractor = (user, data) => {\n  console.log(\"creating contractor\");\n  return fetch(URL + \"/contractors\", {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json',\n      Authorization: localStorage.getItem('token')\n    },\n    body: JSON.stringify({\n      user_id: user.id,\n      projects_completed: 0,\n      services: data.services\n    })\n  }).then(handleErrors).then(response => response.json());\n};\n\nconst createContractee = (user, data) => {\n  console.log(\"creating contractee\");\n  return fetch(URL + \"/contractees\", {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json',\n      Authorization: localStorage.getItem('token')\n    },\n    body: JSON.stringify({\n      user_id: user.id\n    })\n  }).then(handleErrors).then(response => response.json());\n};\n\nconst createPost = data => {\n  return fetch(PostsURL, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json',\n      Authorization: localStorage.getItem('token')\n    },\n    body: JSON.stringify({\n      title: data.title,\n      description: data.description,\n      category: data.category\n    })\n  }).then(handleErrors).then(resp => resp.json());\n};\n\nconst fetchPosts = () => {\n  let url = User_type === \"contractee\" ? User_Posts : PostsURL;\n  return fetch(url, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json',\n      Authorization: localStorage.getItem('token')\n    }\n  }).then(handleErrors).then(resp => resp.json());\n};\n\nconst updatePosts = (postId, data) => {\n  return fetch(PostsURL + '/' + postId, {\n    method: \"PUT\",\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json',\n      Authorization: localStorage.getItem('token')\n    },\n    body: JSON.stringify({\n      title: data.title,\n      description: data.description,\n      category: data.category\n    })\n  }).then(handleErrors).then(resp => {\n    let json = resp.json();\n    console.log(json);\n    return json;\n  });\n};\n\nconst deletePost = postId => {\n  return fetch(PostsURL + '/' + postId, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json',\n      Authorization: localStorage.getItem('token')\n    }\n  }).then(response => response.json());\n};\n\nconst getContractors = category => {\n  return fetch(ListContractorsURL, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json',\n      Authorization: localStorage.getItem('token')\n    },\n    body: JSON.stringify({\n      category: category\n    })\n  }).then(handleErrors).then(resp => resp.json());\n};\n\nconst assignPostToContractor = (postId, contractorEmail) => {\n  return fetch(PostsURL + '/' + postId, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json',\n      Authorization: localStorage.getItem('token')\n    },\n    body: JSON.stringify({\n      contractorEmail: contractorEmail,\n      postId: postId\n    })\n  }).then(handleErrors).then(resp => resp.json());\n};\n\nexport const api = {\n  auth: {\n    login,\n    getCurrentUser\n  },\n  user: {\n    createUser,\n    getcurrentUserType,\n    setCurrentUserType,\n    getUserDetails\n  },\n  posts: {\n    fetchPosts,\n    createPost,\n    updatePosts,\n    assignPostToContractor,\n    deletePost\n  },\n  contractors: {\n    getContractors\n  }\n};","map":{"version":3,"sources":["/Users/flatironschool/Desktop/G_A_D-project/G_A_D-get-all-done-frontend/get-all-done-client/src/services/api.js"],"names":["API_ROOT","token","localStorage","getItem","URL","User_type","PostsURL","User_Posts","ListContractorsURL","UserUrl","setCurrentUserType","type","login","data","fetch","method","headers","Accepts","Authorization","body","JSON","stringify","then","resp","json","getCurrentUser","handleErrors","res","console","log","getUserDetails","userId","getcurrentUserType","response","ok","Error","statusText","createUser","user","username","email","city","country","phone","contractee","contractor","password","createContractor","createContractee","user_id","id","projects_completed","services","createPost","title","description","category","fetchPosts","url","updatePosts","postId","deletePost","getContractors","assignPostToContractor","contractorEmail","api","auth","posts","contractors"],"mappings":"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","sourcesContent":["const API_ROOT = `http://localhost:3000/api/v1`;\nconst token = localStorage.getItem('token');\nconst URL = \"http://localhost:3000\"\nlet User_type = \"\"\nconst PostsURL = \"http://localhost:3000/posts\"\nconst User_Posts = \"http://localhost:3000/user_posts\"\nconst ListContractorsURL = \"http://localhost:3000/list_contractors\"\nconst UserUrl = \"http://localhost:3000/users\"\n// const headers = {\n//     'Content-Type': 'application/json',\n//     Accepts: 'application/json',\n//     Authorization: localStorage.getItem('token')\n// };\n\nconst setCurrentUserType = (type) => {\n    User_type = type\n}\nconst login = data => {\n    return fetch(`${API_ROOT}/auth`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json',\n            Authorization: localStorage.getItem('token')\n        },\n        body: JSON.stringify(data)\n    }).then(resp => resp.json());\n};\n\nconst getCurrentUser = () => {\n    return fetch(`${API_ROOT}/current_user`, {\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json',\n            Authorization: localStorage.getItem('token')\n        },\n    })\n        .then(handleErrors)\n        .then(res => {\n            console.log(res)\n            return res.json()\n        });\n};\n\nconst getUserDetails = (userId) => {\n    return fetch(UserUrl + \"/\" + userId, {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json',\n            Authorization: localStorage.getItem('token')\n        },\n    })\n        .then(handleErrors)\n        .then(resp => resp.json())\n}\n\nconst getcurrentUserType = () => {\n    return User_type\n}\n\nfunction handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n    return response;\n}\n\nconst createUser = (data) => {\n    return fetch(URL + \"/users\", {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json',\n            Authorization: localStorage.getItem('token')\n        },\n        body: JSON.stringify({\n            user: {\n                username: data.username,\n                email: data.email,\n                city: data.city,\n                country: data.country,\n                phone: data.phone,\n                contractee: data.contractee,\n                contractor: data.contractor,\n                password: data.password\n            }\n        })\n    })\n        .then(response => response.json())\n        .then(user => {\n            console.log(user);\n            if (user.contractor) {\n                User_type = \"contractor\"\n                return createContractor(user, data)\n            } else {\n                User_type = \"contractee\"\n                return createContractee(user, data)\n            }\n        })\n}\n\nconst createContractor = (user, data) => {\n    console.log(\"creating contractor\")\n    return fetch(URL + \"/contractors\", {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json',\n            Authorization: localStorage.getItem('token')\n        },\n        body: JSON.stringify({\n            user_id: user.id,\n            projects_completed: 0,\n            services: data.services\n        })\n    }).then(handleErrors)\n        .then(response => response.json())\n}\n\nconst createContractee = (user, data) => {\n    console.log(\"creating contractee\")\n    return fetch(URL + \"/contractees\", {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json',\n            Authorization: localStorage.getItem('token')\n        },\n        body: JSON.stringify({\n            user_id: user.id\n        })\n    }).then(handleErrors)\n        .then(response => response.json())\n}\n\nconst createPost = (data) => {\n    return fetch(PostsURL, {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json',\n            Authorization: localStorage.getItem('token')\n        },\n        body: JSON.stringify({\n            title: data.title,\n            description: data.description,\n            category: data.category\n        })\n    }).then(handleErrors)\n        .then(resp => resp.json())\n}\n\nconst fetchPosts = () => {\n    let url = (User_type === \"contractee\") ? User_Posts : PostsURL\n    return fetch(url, {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json',\n            Authorization: localStorage.getItem('token')\n        },\n    })\n        .then(handleErrors)\n        .then(resp => resp.json())\n}\n\nconst updatePosts = (postId, data) => {\n    return fetch(PostsURL + '/' + postId, {\n        method: \"PUT\",\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json',\n            Authorization: localStorage.getItem('token')\n        },\n        body: JSON.stringify({\n            title: data.title,\n            description: data.description,\n            category: data.category\n        })\n    }).then(handleErrors)\n        .then(resp => {\n            let json = resp.json()\n            console.log(json)\n            return json\n        })\n}\n\nconst deletePost = (postId) => {\n    return fetch(PostsURL + '/' + postId, {\n        method: 'DELETE',\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json',\n            Authorization: localStorage.getItem('token')\n        }\n    })\n        .then(response => response.json());\n}\n\nconst getContractors = (category) => {\n    return fetch(ListContractorsURL, {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json',\n            Authorization: localStorage.getItem('token')\n        },\n        body: JSON.stringify({\n            category: category\n        })\n    })\n        .then(handleErrors)\n        .then(resp => resp.json())\n}\n\nconst assignPostToContractor = (postId, contractorEmail) => {\n    return fetch(PostsURL + '/' + postId, {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json',\n            Authorization: localStorage.getItem('token')\n        },\n        body: JSON.stringify({\n            contractorEmail: contractorEmail,\n            postId: postId\n        })\n    }).then(handleErrors)\n        .then(resp => resp.json())\n}\n\nexport const api = {\n    auth: {\n        login,\n        getCurrentUser\n    },\n    user: {\n        createUser,\n        getcurrentUserType,\n        setCurrentUserType,\n        getUserDetails\n    },\n    posts: {\n        fetchPosts,\n        createPost,\n        updatePosts,\n        assignPostToContractor,\n        deletePost\n    },\n    contractors: {\n        getContractors\n    }\n};\n"]},"metadata":{},"sourceType":"module"}