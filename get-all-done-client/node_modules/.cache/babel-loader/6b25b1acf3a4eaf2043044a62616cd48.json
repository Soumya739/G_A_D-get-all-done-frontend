{"ast":null,"code":"const API_ROOT = `http://localhost:3000/api/v1`;\nconst token = localStorage.getItem('token');\nconst URL = \"http://localhost:3000\";\nlet User_type = \"\";\nconst PostsURL = \"http://localhost:3000/posts\";\nconst headers = {\n  'Content-Type': 'application/json',\n  Accepts: 'application/json',\n  Authorization: token\n};\n\nconst setCurrentUserType = type => {\n  User_type = type;\n};\n\nconst login = data => {\n  return fetch(`${API_ROOT}/auth`, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(data)\n  }).then(resp => resp.json());\n};\n\nconst getCurrentUser = () => {\n  console.log(\"getting current user\", headers);\n  return fetch(`${API_ROOT}/current_user`, {\n    headers\n  }).then(res => {\n    console.log(res);\n    return res.json();\n  });\n};\n\nconst getcurrentUserType = () => {\n  return User_type;\n};\n\nfunction handleErrors(response) {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  return response;\n}\n\nconst createUser = data => {\n  return fetch(URL + \"/users\", {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json'\n    },\n    body: JSON.stringify({\n      user: {\n        username: data.username,\n        email: data.email,\n        city: data.city,\n        country: data.country,\n        phone: data.phone,\n        contractee: data.contractee,\n        contractor: data.contractor,\n        password: data.password\n      }\n    })\n  }).then(response => response.json()).then(user => {\n    console.log(user);\n\n    if (user.contractor) {\n      User_type = \"contractor\";\n      return createContractor(user, data);\n    } else {\n      User_type = \"contractee\";\n      return createContractee(user, data);\n    }\n  });\n};\n\nconst createContractor = (user, data) => {\n  console.log(\"creating contractor\");\n  return fetch(URL + \"/contractors\", {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json'\n    },\n    body: JSON.stringify({\n      user_id: user.id,\n      projects_completed: 0,\n      services: data.services\n    })\n  }).then(handleErrors).then(response => response.json());\n};\n\nconst createContractee = (user, data) => {\n  console.log(\"creating contractee\");\n  return fetch(URL + \"/contractees\", {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify({\n      user_id: user.id\n    })\n  }).then(handleErrors).then(response => response.json());\n};\n\nconst fetchPosts = () => {\n  fetch(PostsURL).then(resp => resp.json()).then(posts => {\n    console.log(posts);\n    this.setState({\n      posts: posts\n    });\n  });\n};\n\nexport const api = {\n  auth: {\n    login,\n    getCurrentUser\n  },\n  user: {\n    createUser,\n    getcurrentUserType,\n    setCurrentUserType\n  },\n  posts: {\n    fetchPosts\n  }\n}; // fetch(URL + \"/users\", {\n//     method: \"POST\",\n//     headers: {\n//         'Content-Type': 'application/json',\n//         Accepts: 'application/json'\n//     },\n//     body: JSON.stringify({\n//         username: username,\n//         email: email,\n//         city: city,\n//         country: country,\n//         phone: phone,\n//         contractee: contractee,\n//         contractor: contractor\n//     })\n// }).then(handleErrors)\n//     .then(response => response.json())\n//     .then(user => {\n//         console.log(user);\n//         if (contractor) {\n//             // createContractor(user, data)\n//             console.log(\"creating contractor\")\n//             fetch(URL + \"/contractors\", {\n//                 method: \"POST\",\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Accepts: 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     user_id: user.id,\n//                     projects_completed: 0,\n//                     password: password,\n//                     services: services\n//                 })\n//             })\n//                 .then(handleErrors)\n//                 .then(response => response.json())\n//                 .then(json => {\n//                     console.log(json)\n//                     this.currentUserStatus(\"contractor\")\n//                 })\n//             // .then(currentUser => {\n//             //     onSetCurrentUser(\"contractor\")\n//             // })\n//         } else {\n//             // createContractee(user, data)\n//             console.log(\"creating contractee\")\n//             fetch(URL + \"/contractees\", {\n//                 method: \"POST\",\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Accepts: 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     user_id: user.id,\n//                     password: password\n//                 })\n//             }).then(handleErrors)\n//                 .then(response => response.json())\n//                 .then(json => {\n//                     console.log(json)\n//                     this.currentUserStatus(\"contractee\")\n//                 })\n//             //         .then(currentUser => {\n//             //             onSetCurrentUser(\"contractee\")\n//             //         }\n//         }\n//     })","map":{"version":3,"sources":["/Users/flatironschool/Desktop/G_A_D-project/G_A_D-get-all-done-frontend/get-all-done-client/src/services/api.js"],"names":["API_ROOT","token","localStorage","getItem","URL","User_type","PostsURL","headers","Accepts","Authorization","setCurrentUserType","type","login","data","fetch","method","body","JSON","stringify","then","resp","json","getCurrentUser","console","log","res","getcurrentUserType","handleErrors","response","ok","Error","statusText","createUser","user","username","email","city","country","phone","contractee","contractor","password","createContractor","createContractee","user_id","id","projects_completed","services","fetchPosts","posts","setState","api","auth"],"mappings":"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","sourcesContent":["const API_ROOT = `http://localhost:3000/api/v1`;\nconst token = localStorage.getItem('token');\nconst URL = \"http://localhost:3000\"\nlet User_type = \"\"\nconst PostsURL = \"http://localhost:3000/posts\"\n\nconst headers = {\n    'Content-Type': 'application/json',\n    Accepts: 'application/json',\n    Authorization: token\n};\n\nconst setCurrentUserType = (type) => {\n    User_type = type\n}\nconst login = data => {\n    return fetch(`${API_ROOT}/auth`, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(data)\n    }).then(resp => resp.json());\n};\n\nconst getCurrentUser = () => {\n    console.log(\"getting current user\", headers)\n    return fetch(`${API_ROOT}/current_user`, {\n        headers\n    }).then(res => {\n        console.log(res)\n        return res.json()\n    });\n};\n\nconst getcurrentUserType = () => {\n    return User_type\n}\n\nfunction handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n    return response;\n}\n\nconst createUser = (data) => {\n    return fetch(URL + \"/users\", {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json'\n        },\n        body: JSON.stringify({\n            user: {\n                username: data.username,\n                email: data.email,\n                city: data.city,\n                country: data.country,\n                phone: data.phone,\n                contractee: data.contractee,\n                contractor: data.contractor,\n                password: data.password\n            }\n        })\n    })\n        .then(response => response.json())\n        .then(user => {\n            console.log(user);\n            if (user.contractor) {\n                User_type = \"contractor\"\n                return createContractor(user, data)\n            } else {\n                User_type = \"contractee\"\n                return createContractee(user, data)\n            }\n        })\n}\n\nconst createContractor = (user, data) => {\n    console.log(\"creating contractor\")\n    return fetch(URL + \"/contractors\", {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json'\n        },\n        body: JSON.stringify({\n            user_id: user.id,\n            projects_completed: 0,\n            services: data.services\n        })\n    }).then(handleErrors)\n        .then(response => response.json())\n}\n\nconst createContractee = (user, data) => {\n    console.log(\"creating contractee\")\n    return fetch(URL + \"/contractees\", {\n        method: \"POST\",\n        headers,\n        body: JSON.stringify({\n            user_id: user.id\n        })\n    }).then(handleErrors)\n        .then(response => response.json())\n}\n\nconst fetchPosts = () => {\n    fetch(PostsURL)\n        .then(resp => resp.json())\n        .then(posts => {\n            console.log(posts)\n            this.setState({ posts: posts })\n        })\n}\nexport const api = {\n    auth: {\n        login,\n        getCurrentUser\n    },\n    user: {\n        createUser,\n        getcurrentUserType,\n        setCurrentUserType\n    },\n    posts: {\n        fetchPosts\n    }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// fetch(URL + \"/users\", {\n//     method: \"POST\",\n//     headers: {\n//         'Content-Type': 'application/json',\n//         Accepts: 'application/json'\n//     },\n//     body: JSON.stringify({\n//         username: username,\n//         email: email,\n//         city: city,\n//         country: country,\n//         phone: phone,\n//         contractee: contractee,\n//         contractor: contractor\n//     })\n// }).then(handleErrors)\n//     .then(response => response.json())\n//     .then(user => {\n//         console.log(user);\n//         if (contractor) {\n//             // createContractor(user, data)\n//             console.log(\"creating contractor\")\n//             fetch(URL + \"/contractors\", {\n//                 method: \"POST\",\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Accepts: 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     user_id: user.id,\n//                     projects_completed: 0,\n//                     password: password,\n//                     services: services\n//                 })\n//             })\n//                 .then(handleErrors)\n//                 .then(response => response.json())\n//                 .then(json => {\n//                     console.log(json)\n//                     this.currentUserStatus(\"contractor\")\n//                 })\n//             // .then(currentUser => {\n//             //     onSetCurrentUser(\"contractor\")\n//             // })\n\n//         } else {\n//             // createContractee(user, data)\n//             console.log(\"creating contractee\")\n//             fetch(URL + \"/contractees\", {\n//                 method: \"POST\",\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Accepts: 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     user_id: user.id,\n//                     password: password\n//                 })\n//             }).then(handleErrors)\n//                 .then(response => response.json())\n//                 .then(json => {\n//                     console.log(json)\n//                     this.currentUserStatus(\"contractee\")\n//                 })\n//             //         .then(currentUser => {\n//             //             onSetCurrentUser(\"contractee\")\n//             //         }\n//         }\n//     })"]},"metadata":{},"sourceType":"module"}