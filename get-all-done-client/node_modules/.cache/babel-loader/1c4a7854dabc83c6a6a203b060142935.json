{"ast":null,"code":"const API_ROOT = `http://localhost:3000/api/v1`;\nconst token = localStorage.getItem('token');\nconst URL = \"http://localhost:3000\";\nlet User_type = \"\";\nconst PostsURL = \"http://localhost:3000/posts\";\nconst User_Posts = \"http://localhost:3000/user_posts\"; // const headers = {\n//     'Content-Type': 'application/json',\n//     Accepts: 'application/json',\n//     Authorization: localStorage.getItem('token')\n// };\n\nconst setCurrentUserType = type => {\n  User_type = type;\n};\n\nconst login = data => {\n  return fetch(`${API_ROOT}/auth`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json',\n      Authorization: localStorage.getItem('token')\n    },\n    body: JSON.stringify(data)\n  }).then(resp => resp.json());\n};\n\nconst getCurrentUser = () => {\n  return fetch(`${API_ROOT}/current_user`, {\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json',\n      Authorization: localStorage.getItem('token')\n    }\n  }).then(handleErrors).then(res => {\n    console.log(res);\n    return res.json();\n  });\n};\n\nconst getcurrentUserType = () => {\n  return User_type;\n};\n\nfunction handleErrors(response) {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  return response;\n}\n\nconst createUser = data => {\n  return fetch(URL + \"/users\", {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json',\n      Authorization: localStorage.getItem('token')\n    },\n    body: JSON.stringify({\n      user: {\n        username: data.username,\n        email: data.email,\n        city: data.city,\n        country: data.country,\n        phone: data.phone,\n        contractee: data.contractee,\n        contractor: data.contractor,\n        password: data.password\n      }\n    })\n  }).then(response => response.json()).then(user => {\n    console.log(user);\n\n    if (user.contractor) {\n      User_type = \"contractor\";\n      return createContractor(user, data);\n    } else {\n      User_type = \"contractee\";\n      return createContractee(user, data);\n    }\n  });\n};\n\nconst createContractor = (user, data) => {\n  console.log(\"creating contractor\");\n  return fetch(URL + \"/contractors\", {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json',\n      Authorization: localStorage.getItem('token')\n    },\n    body: JSON.stringify({\n      user_id: user.id,\n      projects_completed: 0,\n      services: data.services\n    })\n  }).then(handleErrors).then(response => response.json());\n};\n\nconst createContractee = (user, data) => {\n  console.log(\"creating contractee\");\n  return fetch(URL + \"/contractees\", {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json',\n      Authorization: localStorage.getItem('token')\n    },\n    body: JSON.stringify({\n      user_id: user.id\n    })\n  }).then(handleErrors).then(response => response.json());\n};\n\nconst createPost = data => {\n  return fetch(PostsURL, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json',\n      Authorization: localStorage.getItem('token')\n    },\n    body: JSON.stringify({\n      title: data.title,\n      description: data.description,\n      categories: data.categories\n    })\n  }).then(handleErrors).then(resp => resp.json());\n};\n\nconst fetchPosts = () => {\n  return fetch(User_type === \"contractor\" ? PostsURL : User_Posts, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json',\n      Authorization: localStorage.getItem('token')\n    }\n  }).then(handleErrors).then(resp => resp.json());\n};\n\nconst updatePosts = (postId, data) => {\n  return fetch(PostsURL + '/' + postId, {\n    method: \"PUT\",\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json',\n      Authorization: localStorage.getItem('token')\n    },\n    body: JSON.stringify({\n      title: data.title,\n      description: data.description,\n      categories: data.categories\n    })\n  }).then(handleErrors).then(resp => resp.json());\n};\n\nconst assignPostToContractor = (postId, contractorEmail) => {\n  return fetch(PostsURL + '/' + postId, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json',\n      Authorization: localStorage.getItem('token')\n    },\n    body: JSON.stringify({\n      contractorEmail: contractorEmail,\n      postId: postId\n    })\n  }).then(handleErrors).then(resp => resp.json());\n};\n\nexport const api = {\n  auth: {\n    login,\n    getCurrentUser\n  },\n  user: {\n    createUser,\n    getcurrentUserType,\n    setCurrentUserType\n  },\n  posts: {\n    fetchPosts,\n    createPost,\n    updatePosts\n  }\n}; // fetch(URL + \"/users\", {\n//     method: \"POST\",\n//     headers: {\n//         'Content-Type': 'application/json',\n//         Accepts: 'application/json'\n//     },\n//     body: JSON.stringify({\n//         username: username,\n//         email: email,\n//         city: city,\n//         country: country,\n//         phone: phone,\n//         contractee: contractee,\n//         contractor: contractor\n//     })\n// }).then(handleErrors)\n//     .then(response => response.json())\n//     .then(user => {\n//         console.log(user);\n//         if (contractor) {\n//             // createContractor(user, data)\n//             console.log(\"creating contractor\")\n//             fetch(URL + \"/contractors\", {\n//                 method: \"POST\",\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Accepts: 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     user_id: user.id,\n//                     projects_completed: 0,\n//                     password: password,\n//                     services: services\n//                 })\n//             })\n//                 .then(handleErrors)\n//                 .then(response => response.json())\n//                 .then(json => {\n//                     console.log(json)\n//                     this.currentUserStatus(\"contractor\")\n//                 })\n//             // .then(currentUser => {\n//             //     onSetCurrentUser(\"contractor\")\n//             // })\n//         } else {\n//             // createContractee(user, data)\n//             console.log(\"creating contractee\")\n//             fetch(URL + \"/contractees\", {\n//                 method: \"POST\",\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Accepts: 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     user_id: user.id,\n//                     password: password\n//                 })\n//             }).then(handleErrors)\n//                 .then(response => response.json())\n//                 .then(json => {\n//                     console.log(json)\n//                     this.currentUserStatus(\"contractee\")\n//                 })\n//             //         .then(currentUser => {\n//             //             onSetCurrentUser(\"contractee\")\n//             //         }\n//         }\n//     })","map":{"version":3,"sources":["/Users/flatironschool/Desktop/G_A_D-project/G_A_D-get-all-done-frontend/get-all-done-client/src/services/api.js"],"names":["API_ROOT","token","localStorage","getItem","URL","User_type","PostsURL","User_Posts","setCurrentUserType","type","login","data","fetch","method","headers","Accepts","Authorization","body","JSON","stringify","then","resp","json","getCurrentUser","handleErrors","res","console","log","getcurrentUserType","response","ok","Error","statusText","createUser","user","username","email","city","country","phone","contractee","contractor","password","createContractor","createContractee","user_id","id","projects_completed","services","createPost","title","description","categories","fetchPosts","updatePosts","postId","assignPostToContractor","contractorEmail","api","auth","posts"],"mappings":"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","sourcesContent":["const API_ROOT = `http://localhost:3000/api/v1`;\nconst token = localStorage.getItem('token');\nconst URL = \"http://localhost:3000\"\nlet User_type = \"\"\nconst PostsURL = \"http://localhost:3000/posts\"\nconst User_Posts = \"http://localhost:3000/user_posts\"\n\n// const headers = {\n//     'Content-Type': 'application/json',\n//     Accepts: 'application/json',\n//     Authorization: localStorage.getItem('token')\n// };\n\nconst setCurrentUserType = (type) => {\n    User_type = type\n}\nconst login = data => {\n    return fetch(`${API_ROOT}/auth`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json',\n            Authorization: localStorage.getItem('token')\n        },\n        body: JSON.stringify(data)\n    }).then(resp => resp.json());\n};\n\nconst getCurrentUser = () => {\n    return fetch(`${API_ROOT}/current_user`, {\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json',\n            Authorization: localStorage.getItem('token')\n        },\n    })\n        .then(handleErrors)\n        .then(res => {\n            console.log(res)\n            return res.json()\n        });\n};\n\nconst getcurrentUserType = () => {\n    return User_type\n}\n\nfunction handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n    return response;\n}\n\nconst createUser = (data) => {\n    return fetch(URL + \"/users\", {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json',\n            Authorization: localStorage.getItem('token')\n        },\n        body: JSON.stringify({\n            user: {\n                username: data.username,\n                email: data.email,\n                city: data.city,\n                country: data.country,\n                phone: data.phone,\n                contractee: data.contractee,\n                contractor: data.contractor,\n                password: data.password\n            }\n        })\n    })\n        .then(response => response.json())\n        .then(user => {\n            console.log(user);\n            if (user.contractor) {\n                User_type = \"contractor\"\n                return createContractor(user, data)\n            } else {\n                User_type = \"contractee\"\n                return createContractee(user, data)\n            }\n        })\n}\n\nconst createContractor = (user, data) => {\n    console.log(\"creating contractor\")\n    return fetch(URL + \"/contractors\", {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json',\n            Authorization: localStorage.getItem('token')\n        },\n        body: JSON.stringify({\n            user_id: user.id,\n            projects_completed: 0,\n            services: data.services\n        })\n    }).then(handleErrors)\n        .then(response => response.json())\n}\n\nconst createContractee = (user, data) => {\n    console.log(\"creating contractee\")\n    return fetch(URL + \"/contractees\", {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json',\n            Authorization: localStorage.getItem('token')\n        },\n        body: JSON.stringify({\n            user_id: user.id\n        })\n    }).then(handleErrors)\n        .then(response => response.json())\n}\n\nconst createPost = (data) => {\n    return fetch(PostsURL, {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json',\n            Authorization: localStorage.getItem('token')\n        },\n        body: JSON.stringify({\n            title: data.title,\n            description: data.description,\n            categories: data.categories\n        })\n    }).then(handleErrors)\n        .then(resp => resp.json())\n}\n\nconst fetchPosts = () => {\n    return fetch(User_type === \"contractor\" ? PostsURL : User_Posts, {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json',\n            Authorization: localStorage.getItem('token')\n        },\n    })\n        .then(handleErrors)\n        .then(resp => resp.json())\n}\n\nconst updatePosts = (postId, data) => {\n    return fetch(PostsURL + '/' + postId, {\n        method: \"PUT\",\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json',\n            Authorization: localStorage.getItem('token')\n        },\n        body: JSON.stringify({\n            title: data.title,\n            description: data.description,\n            categories: data.categories\n        })\n    }).then(handleErrors)\n        .then(resp => resp.json())\n}\n\nconst assignPostToContractor = (postId, contractorEmail, ) => {\n    return fetch(PostsURL + '/' + postId, {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json',\n            Authorization: localStorage.getItem('token')\n        },\n        body: JSON.stringify({\n            contractorEmail: contractorEmail,\n            postId: postId\n        })\n    }).then(handleErrors)\n        .then(resp => resp.json())\n}\n\n\n\nexport const api = {\n    auth: {\n        login,\n        getCurrentUser\n    },\n    user: {\n        createUser,\n        getcurrentUserType,\n        setCurrentUserType\n    },\n    posts: {\n        fetchPosts,\n        createPost,\n        updatePosts\n    }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// fetch(URL + \"/users\", {\n//     method: \"POST\",\n//     headers: {\n//         'Content-Type': 'application/json',\n//         Accepts: 'application/json'\n//     },\n//     body: JSON.stringify({\n//         username: username,\n//         email: email,\n//         city: city,\n//         country: country,\n//         phone: phone,\n//         contractee: contractee,\n//         contractor: contractor\n//     })\n// }).then(handleErrors)\n//     .then(response => response.json())\n//     .then(user => {\n//         console.log(user);\n//         if (contractor) {\n//             // createContractor(user, data)\n//             console.log(\"creating contractor\")\n//             fetch(URL + \"/contractors\", {\n//                 method: \"POST\",\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Accepts: 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     user_id: user.id,\n//                     projects_completed: 0,\n//                     password: password,\n//                     services: services\n//                 })\n//             })\n//                 .then(handleErrors)\n//                 .then(response => response.json())\n//                 .then(json => {\n//                     console.log(json)\n//                     this.currentUserStatus(\"contractor\")\n//                 })\n//             // .then(currentUser => {\n//             //     onSetCurrentUser(\"contractor\")\n//             // })\n\n//         } else {\n//             // createContractee(user, data)\n//             console.log(\"creating contractee\")\n//             fetch(URL + \"/contractees\", {\n//                 method: \"POST\",\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Accepts: 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     user_id: user.id,\n//                     password: password\n//                 })\n//             }).then(handleErrors)\n//                 .then(response => response.json())\n//                 .then(json => {\n//                     console.log(json)\n//                     this.currentUserStatus(\"contractee\")\n//                 })\n//             //         .then(currentUser => {\n//             //             onSetCurrentUser(\"contractee\")\n//             //         }\n//         }\n//     })"]},"metadata":{},"sourceType":"module"}