{"ast":null,"code":"// const API_ROOT = `http://localhost:3000/api/v1`;\nconst token = localStorage.getItem('token');\nconst URL = \"http://localhost:3000\";\nlet User_type = \"\";\nconst headers = {\n  'Content-Type': 'application/json',\n  Accepts: 'application/json',\n  Authorization: token\n};\n\nconst setCurrentUserType = type => {\n  User_type = type;\n};\n\nconst login = data => {\n  return fetch(`${URL}/auth`, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(data)\n  }).then(resp => resp.json());\n};\n\nconst getCurrentUser = () => {\n  console.log(\"getting current user\", headers);\n  return fetch(`${API_ROOT}/current_user`, {\n    headers\n  }).then(res => {\n    console.log(res);\n    return res.json();\n  });\n};\n\nconst getcurrentUserType = () => {\n  return User_type;\n};\n\nfunction handleErrors(response) {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  return response;\n}\n\nconst createUser = data => {\n  return fetch(URL + \"/users\", {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json'\n    },\n    body: JSON.stringify({\n      username: data.username,\n      email: data.email,\n      city: data.city,\n      country: data.country,\n      phone: data.phone,\n      contractee: data.contractee,\n      contractor: data.contractor\n    })\n  }).then(response => response.json()).then(user => {\n    console.log(user);\n\n    if (user.contractor) {\n      User_type = \"contractor\";\n      return createContractor(user, data);\n    } else {\n      User_type = \"contractee\";\n      return createContractee(user, data);\n    }\n  });\n};\n\nconst createContractor = (user, data) => {\n  console.log(\"creating contractor\");\n  return fetch(URL + \"/contractors\", {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      Accepts: 'application/json'\n    },\n    body: JSON.stringify({\n      user_id: user.id,\n      projects_completed: 0,\n      password: data.password,\n      services: data.services\n    })\n  }).then(handleErrors).then(response => response.json());\n};\n\nconst createContractee = (user, data) => {\n  console.log(\"creating contractee\");\n  return fetch(URL + \"/contractees\", {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify({\n      user_id: user.id,\n      password: data.password\n    })\n  }).then(handleErrors).then(response => response.json());\n};\n\nexport const api = {\n  auth: {\n    login,\n    getCurrentUser\n  },\n  user: {\n    createUser,\n    getcurrentUserType,\n    setCurrentUserType\n  }\n}; // fetch(URL + \"/users\", {\n//     method: \"POST\",\n//     headers: {\n//         'Content-Type': 'application/json',\n//         Accepts: 'application/json'\n//     },\n//     body: JSON.stringify({\n//         username: username,\n//         email: email,\n//         city: city,\n//         country: country,\n//         phone: phone,\n//         contractee: contractee,\n//         contractor: contractor\n//     })\n// }).then(handleErrors)\n//     .then(response => response.json())\n//     .then(user => {\n//         console.log(user);\n//         if (contractor) {\n//             // createContractor(user, data)\n//             console.log(\"creating contractor\")\n//             fetch(URL + \"/contractors\", {\n//                 method: \"POST\",\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Accepts: 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     user_id: user.id,\n//                     projects_completed: 0,\n//                     password: password,\n//                     services: services\n//                 })\n//             })\n//                 .then(handleErrors)\n//                 .then(response => response.json())\n//                 .then(json => {\n//                     console.log(json)\n//                     this.currentUserStatus(\"contractor\")\n//                 })\n//             // .then(currentUser => {\n//             //     onSetCurrentUser(\"contractor\")\n//             // })\n//         } else {\n//             // createContractee(user, data)\n//             console.log(\"creating contractee\")\n//             fetch(URL + \"/contractees\", {\n//                 method: \"POST\",\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Accepts: 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     user_id: user.id,\n//                     password: password\n//                 })\n//             }).then(handleErrors)\n//                 .then(response => response.json())\n//                 .then(json => {\n//                     console.log(json)\n//                     this.currentUserStatus(\"contractee\")\n//                 })\n//             //         .then(currentUser => {\n//             //             onSetCurrentUser(\"contractee\")\n//             //         }\n//         }\n//     })","map":{"version":3,"sources":["/Users/flatironschool/Desktop/G_A_D-project/G_A_D-get-all-done-frontend/get-all-done-client/src/services/api.js"],"names":["token","localStorage","getItem","URL","User_type","headers","Accepts","Authorization","setCurrentUserType","type","login","data","fetch","method","body","JSON","stringify","then","resp","json","getCurrentUser","console","log","API_ROOT","res","getcurrentUserType","handleErrors","response","ok","Error","statusText","createUser","username","email","city","country","phone","contractee","contractor","user","createContractor","createContractee","user_id","id","projects_completed","password","services","api","auth"],"mappings":"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","sourcesContent":["// const API_ROOT = `http://localhost:3000/api/v1`;\nconst token = localStorage.getItem('token');\nconst URL = \"http://localhost:3000\"\nlet User_type = \"\"\n\nconst headers = {\n    'Content-Type': 'application/json',\n    Accepts: 'application/json',\n    Authorization: token\n};\n\nconst setCurrentUserType = (type) => {\n    User_type = type\n}\nconst login = data => {\n    return fetch(`${URL}/auth`, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(data)\n    }).then(resp => resp.json());\n};\n\nconst getCurrentUser = () => {\n    console.log(\"getting current user\", headers)\n    return fetch(`${API_ROOT}/current_user`, {\n        headers\n    }).then(res => {\n        console.log(res)\n        return res.json()\n    });\n};\n\nconst getcurrentUserType = () => {\n    return User_type\n}\n\n\nfunction handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n    return response;\n}\n\n\nconst createUser = (data) => {\n    return fetch(URL + \"/users\", {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json'\n        },\n        body: JSON.stringify({\n            username: data.username,\n            email: data.email,\n            city: data.city,\n            country: data.country,\n            phone: data.phone,\n            contractee: data.contractee,\n            contractor: data.contractor\n        })\n    })\n        .then(response => response.json())\n        .then(user => {\n            console.log(user);\n            if (user.contractor) {\n                User_type = \"contractor\"\n                return createContractor(user, data)\n            } else {\n                User_type = \"contractee\"\n                return createContractee(user, data)\n            }\n        })\n}\n\nconst createContractor = (user, data) => {\n    console.log(\"creating contractor\")\n    return fetch(URL + \"/contractors\", {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            Accepts: 'application/json'\n        },\n        body: JSON.stringify({\n            user_id: user.id,\n            projects_completed: 0,\n            password: data.password,\n            services: data.services\n        })\n    }).then(handleErrors)\n        .then(response => response.json())\n}\n\nconst createContractee = (user, data) => {\n    console.log(\"creating contractee\")\n    return fetch(URL + \"/contractees\", {\n        method: \"POST\",\n        headers,\n        body: JSON.stringify({\n            user_id: user.id,\n            password: data.password\n        })\n    }).then(handleErrors)\n        .then(response => response.json())\n}\nexport const api = {\n    auth: {\n        login,\n        getCurrentUser\n    },\n    user: {\n        createUser,\n        getcurrentUserType,\n        setCurrentUserType\n    }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// fetch(URL + \"/users\", {\n//     method: \"POST\",\n//     headers: {\n//         'Content-Type': 'application/json',\n//         Accepts: 'application/json'\n//     },\n//     body: JSON.stringify({\n//         username: username,\n//         email: email,\n//         city: city,\n//         country: country,\n//         phone: phone,\n//         contractee: contractee,\n//         contractor: contractor\n//     })\n// }).then(handleErrors)\n//     .then(response => response.json())\n//     .then(user => {\n//         console.log(user);\n//         if (contractor) {\n//             // createContractor(user, data)\n//             console.log(\"creating contractor\")\n//             fetch(URL + \"/contractors\", {\n//                 method: \"POST\",\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Accepts: 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     user_id: user.id,\n//                     projects_completed: 0,\n//                     password: password,\n//                     services: services\n//                 })\n//             })\n//                 .then(handleErrors)\n//                 .then(response => response.json())\n//                 .then(json => {\n//                     console.log(json)\n//                     this.currentUserStatus(\"contractor\")\n//                 })\n//             // .then(currentUser => {\n//             //     onSetCurrentUser(\"contractor\")\n//             // })\n\n//         } else {\n//             // createContractee(user, data)\n//             console.log(\"creating contractee\")\n//             fetch(URL + \"/contractees\", {\n//                 method: \"POST\",\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Accepts: 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     user_id: user.id,\n//                     password: password\n//                 })\n//             }).then(handleErrors)\n//                 .then(response => response.json())\n//                 .then(json => {\n//                     console.log(json)\n//                     this.currentUserStatus(\"contractee\")\n//                 })\n//             //         .then(currentUser => {\n//             //             onSetCurrentUser(\"contractee\")\n//             //         }\n//         }\n//     })"]},"metadata":{},"sourceType":"module"}